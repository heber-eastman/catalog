name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: catalog-golf-backend
  ECR_REPOSITORY_FRONTEND: catalog-golf-frontend
  ECS_CLUSTER: catalog-golf
  ECS_SERVICE_BACKEND: catalog-golf-backend
  ECS_SERVICE_FRONTEND: catalog-golf-frontend

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: catalog_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run backend tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/catalog_test
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-ci-at-least-32-characters
          EMAIL_FROM: test@catalog.golf
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          SESSION_SECRET: test-session-secret
        run: npm run test --workspace=backend

      - name: Run frontend tests
        run: npm run test --workspace=frontend

      - name: Build backend
        run: npm run build:backend

      - name: Build frontend
        run: npm run build:frontend

  e2e-tests:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: catalog_e2e
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set up database
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/catalog_e2e
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-e2e-at-least-32-characters
          SESSION_SECRET: test-session-secret
        run: |
          cd backend
          npm run db:migrate

      - name: Start backend
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/catalog_e2e
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-e2e-at-least-32-characters
          EMAIL_FROM: test@catalog.golf
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          SESSION_SECRET: test-session-secret
          PORT: 3000
        run: |
          cd backend
          npm start &
          sleep 10

      - name: Start frontend
        run: |
          cd frontend
          npm run build
          npm run preview &
          sleep 5

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          wait-on: 'http://localhost:4173, http://localhost:3000/health'
          wait-on-timeout: 120

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          for i in {1..3}; do
            echo "Attempt $i of 3"
            if npm audit --audit-level moderate; then
              exit 0
            fi
            echo "npm audit failed, waiting 10 seconds before retry..."
            sleep 10
          done
          echo "::warning::npm audit failed after 3 attempts due to registry issues"
          exit 0
        continue-on-error: true

      - name: Check for vulnerabilities
        run: |
          if [ -f "frontend/package-lock.json" ]; then
            cd frontend && npm audit --audit-level high
          fi
          if [ -f "backend/package-lock.json" ]; then
            cd backend && npm audit --audit-level high
          fi
        continue-on-error: true

  build-docker:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --file backend/Dockerfile \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest \
            ./backend

      - name: Build frontend Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --file frontend/Dockerfile \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest \
            ./frontend

      - name: Push backend image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

      - name: Push frontend image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Deploy backend to ECS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster $ECS_CLUSTER-staging \
            --service $ECS_SERVICE_BACKEND-staging \
            --force-new-deployment

      - name: Deploy frontend to ECS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster $ECS_CLUSTER-staging \
            --service $ECS_SERVICE_FRONTEND-staging \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER-staging \
            --services $ECS_SERVICE_BACKEND-staging $ECS_SERVICE_FRONTEND-staging

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30

          # Run health checks
          curl -f https://staging.catalog.golf/health || exit 1
          curl -f https://staging.catalog.golf/api/v1/auth/test || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          cd backend
          npm ci --only=production
          npm run db:migrate

      - name: Deploy backend to ECS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_BACKEND \
            --force-new-deployment

      - name: Deploy frontend to ECS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_FRONTEND \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_BACKEND $ECS_SERVICE_FRONTEND

      - name: Run production smoke tests
        run: |
          # Wait for services to be ready
          sleep 60

          # Run comprehensive health checks
          curl -f https://catalog.golf/health || exit 1
          curl -f https://catalog.golf/api/v1/auth/test || exit 1

          # Verify SSL
          curl -f https://catalog.golf/api/v1/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Production deployment successful!"
          echo "Application is live at https://catalog.golf"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "🚨 Deployment failed, rolling back..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_BACKEND \
            --task-definition $ECS_SERVICE_BACKEND:PREVIOUS
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_FRONTEND \
            --task-definition $ECS_SERVICE_FRONTEND:PREVIOUS
