version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: catalog-postgres
    environment:
      POSTGRES_DB: catalog_dev
      POSTGRES_USER: catalog_user
      POSTGRES_PASSWORD: catalog_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U catalog_user -d catalog_dev"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - catalog-network

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: catalog-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - catalog-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: catalog-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://catalog_user:catalog_password@postgres:5432/catalog_dev
      JWT_SECRET: development-jwt-secret-key-at-least-32-characters
      SESSION_SECRET: development-session-secret
      EMAIL_FROM: noreply@catalog.golf
      AWS_REGION: us-east-1
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "3000:3000"
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/migrations:/app/migrations:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - catalog-network
    command: ["npm", "run", "dev"]

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: catalog-frontend
    ports:
      - "8080:8080"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - catalog-network

  # Nginx Load Balancer (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: catalog-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - catalog-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  catalog-network:
    driver: bridge 